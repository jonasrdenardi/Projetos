/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ItemDAO;
import controller.MesaDAO;
import controller.PedidoDAO;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.Item;
import model.ItemPedido;
import model.Mesa;
import model.Pedido;
import model.Usuario;

/**
 *
 * @author User
 */
public class PedidosAbrir extends javax.swing.JInternalFrame {

    DecimalFormat dm = new DecimalFormat("0.00");
    
    public PedidosAbrir() {
        initComponents();
        preencherTabelaItem(new ItemDAO().listar(Menu.getUsuario()));
        configurarTabelaItemPedido();
        configurarTabelaItem();
        setMesas(new MesaDAO().listarAtiva(Menu.getUsuario()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItemPedido = new javax.swing.JTable();
        lblItensDisp = new javax.swing.JLabel();
        lblItensIncPedido = new javax.swing.JLabel();
        btnGerarPedido = new javax.swing.JButton();
        btnExcluirItem = new javax.swing.JButton();
        lblTotalPedido = new javax.swing.JLabel();
        lblVTotalPedido = new javax.swing.JLabel();
        btnAddItem = new javax.swing.JButton();
        spQtd = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        lblV10Garcom = new javax.swing.JLabel();
        lbl10Garcom = new javax.swing.JLabel();
        lblMesa = new javax.swing.JLabel();
        cbMesa = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Item", "Descrição Item", "Valor Un."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItem.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(tblItem);

        tblItemPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Item", "Descrição Item", "Qtd Item", "Valor Un.", "Valor Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItemPedido.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(tblItemPedido);

        lblItensDisp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItensDisp.setText("Itens Disponíveis");

        lblItensIncPedido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItensIncPedido.setText("Itens incluidos no Pedido");

        btnGerarPedido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGerarPedido.setText("Gerar Pedido");
        btnGerarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarPedidoActionPerformed(evt);
            }
        });

        btnExcluirItem.setText("Excluir Intem");
        btnExcluirItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirItemActionPerformed(evt);
            }
        });

        lblTotalPedido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalPedido.setText("Total Pedido:");

        lblVTotalPedido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnAddItem.setText("Adicionar Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        spQtd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        spQtd.setModel(new javax.swing.SpinnerNumberModel(1, 0, 10000, 1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Quantidade");

        lblV10Garcom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lbl10Garcom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl10Garcom.setText("10% Garçom:");

        lblMesa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblMesa.setText("Mesa");

        cbMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMesaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddItem)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spQtd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblItensDisp, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblItensIncPedido))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl10Garcom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblV10Garcom, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTotalPedido)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblVTotalPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(217, 217, 217))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnExcluirItem)
                                .addGap(67, 67, 67))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnGerarPedido)
                                .addGap(55, 55, 55))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMesa))
                        .addContainerGap(97, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblItensDisp, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnAddItem)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnExcluirItem)
                        .addGap(18, 18, 18)
                        .addComponent(lblMesa)
                        .addGap(18, 18, 18)
                        .addComponent(cbMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnGerarPedido)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblItensIncPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl10Garcom)
                            .addComponent(lblV10Garcom, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalPedido)
                            .addComponent(lblVTotalPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        // Pega o indice da linha selecionada
        int indiceLinha = tblItem.getSelectedRow();
        if (indiceLinha != -1) {
            if(verificaExistenciaItemPedido((int) tblItem.getValueAt(indiceLinha, 0)) == false){

            Pedido p = new Pedido();
            Item[] i = new Item[1];
            i[0] = new Item();
            ItemPedido[] ip = new ItemPedido[1];
            ip[0] = new ItemPedido();
            String valorItem = ""; // criada para converter string em float        

            // Obtem os valores do pedido selecionado
            i[0].setId((int) tblItem.getValueAt(indiceLinha, 0));
            i[0].setDesc((String) tblItem.getValueAt(indiceLinha, 1));

            valorItem = (String) tblItem.getValueAt(indiceLinha, 2); // pega o valor do item e tranforma numa string
            valorItem = valorItem.replaceAll("\\,", "."); // substitui virgula por ponto
            i[0].setValor(Float.valueOf(valorItem)); // acrescenta o valor em float

            ip[0].setQtdItem((int) spQtd.getValue());

            p.setItem(i);
            p.setQtdItem(ip);

            preencherTabelaItemPedido(p);
            set10GarcomETotal();
            
            } else{
                JOptionPane.showMessageDialog(null, "Item já incluido !");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Selecione um item !");
        }
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnExcluirItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirItemActionPerformed
        if(tblItemPedido.getSelectedRow() != -1){
            // Remove item selecionado da tabel itemPedido 
            ((DefaultTableModel) tblItemPedido.getModel()).removeRow(tblItemPedido.getSelectedRow());
            set10GarcomETotal();
        }
    }//GEN-LAST:event_btnExcluirItemActionPerformed

    private void btnGerarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarPedidoActionPerformed
        int count;
        // Conta quantos itens serao adicionados
        count = tblItemPedido.getColumnCount();
        
        Pedido p = new Pedido();
        Mesa m = new Mesa();
        Item i[] =  new Item[count];
        ItemPedido ip[] = new ItemPedido[count];
        Usuario u = new Usuario();
        Date data = new Date(); // criada para receber a data
        String valorString = ""; // criada para converter string em float
        
        // For para acrescentar os itens as variáveis
        for(int x = 0; x < count; x++){
            i[x] = new Item();
            ip[x] = new ItemPedido();
            
            i[x].setId((int) tblItemPedido.getValueAt(x, 0)); // pega o id do item
            i[x].setDesc((String) tblItemPedido.getValueAt(x, 1)); // pega a descricao do item
            ip[x].setQtdItem((int) tblItemPedido.getValueAt(x, 2)); // pega a quantidade do item
            
            valorString = (String) tblItemPedido.getValueAt(x, 3); // pega o valor do item e tranforma numa string
            valorString = valorString.replaceAll("\\,", "."); // substitui virgula por ponto
            i[x].setValor(Float.valueOf(valorString)); // acrescenta o valor em float            
        }
        m.setId((int) cbMesa.getSelectedItem()); // pega a mesa selecionada
        u.setNome(Menu.getUsuario().getNome());
        
        p.setItem(i);
        p.setQtdItem(ip);
        p.setMesa(m);
        p.setUsuario(u);
        
        SimpleDateFormat dtFormatador = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        p.setData(dtFormatador.format(data));
        
        valorString = lblV10Garcom.getText(); // pega o valor dos 10% do garcom
        valorString = valorString.replaceAll("\\,", "."); // substitui virgula por ponto
        p.setGarcom10(Float.valueOf(valorString)); // acrescenta o valor em float
        
        valorString = lblVTotalPedido.getText(); // pega o valor do total do pedido
        valorString = valorString.replaceAll("\\,", "."); // substitui virgula por ponto
        p.setValor(Float.valueOf(valorString)); // acrescenta o valor em float
        
        p.setId(new PedidoDAO().inserir(p.getUsuario(),p));
        
        
    }//GEN-LAST:event_btnGerarPedidoActionPerformed

    private void cbMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMesaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbMesaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnExcluirItem;
    private javax.swing.JButton btnGerarPedido;
    private javax.swing.JComboBox<String> cbMesa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl10Garcom;
    private javax.swing.JLabel lblItensDisp;
    private javax.swing.JLabel lblItensIncPedido;
    private javax.swing.JLabel lblMesa;
    private javax.swing.JLabel lblTotalPedido;
    private javax.swing.JLabel lblV10Garcom;
    private javax.swing.JLabel lblVTotalPedido;
    private javax.swing.JSpinner spQtd;
    private javax.swing.JTable tblItem;
    private javax.swing.JTable tblItemPedido;
    // End of variables declaration//GEN-END:variables
    
    public void configurarTabelaItem(){
            //Configura a tabela e a posição dos itens na coluna
            DefaultTableModel m = (DefaultTableModel) tblItem.getModel();
            tblItem.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblItem.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblItem.getColumnModel().getColumn(2).setPreferredWidth(100);
            DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
            DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
            DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
            esquerda.setHorizontalAlignment(SwingConstants.LEFT);
            centralizado.setHorizontalAlignment(SwingConstants.CENTER);
            direita.setHorizontalAlignment(SwingConstants.RIGHT);
            tblItem.getColumnModel().getColumn(2).setCellRenderer(direita);
            
            tblItem.setModel(m);
    }

    public void configurarTabelaItemPedido() {
        //Configura a tabela e a posição dos itens na coluna
        DefaultTableModel m = (DefaultTableModel) tblItemPedido.getModel();
        tblItemPedido.getColumnModel().getColumn(0).setPreferredWidth(50);
        tblItemPedido.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblItemPedido.getColumnModel().getColumn(2).setPreferredWidth(50);
        tblItemPedido.getColumnModel().getColumn(3).setPreferredWidth(100);
        tblItemPedido.getColumnModel().getColumn(4).setPreferredWidth(100);
        DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        tblItemPedido.getColumnModel().getColumn(3).setCellRenderer(direita);
        tblItemPedido.getColumnModel().getColumn(4).setCellRenderer(direita);

        tblItemPedido.setModel(m);
    }

    public void preencherTabelaItemPedido(Pedido p) {
        if (p != null) {
            
            DefaultTableModel m = (DefaultTableModel) tblItemPedido.getModel();

            m.addRow(new Object[]{p.getItem(0).getId(), p.getItem(0).getDesc(), p.getQtdItem(0).getQtdItem(), dm.format(p.getItem(0).getValor()), dm.format(p.getQtdItem(0).getQtdItem() * p.getItem(0).getValor())});

            tblItemPedido.setModel(m);

        }
    }
      
    public void preencherTabelaItem(List<Object> lista) {
        if (lista != null) {

            //Configura a tabela e a posição dos itens na coluna
            DefaultTableModel m = (DefaultTableModel) tblItem.getModel();

            for (Object obj : lista) {
                Item i = (Item) obj;
                m.addRow(new Object[]{i.getId(), i.getDesc(), dm.format(i.getValor())});

            }
            tblItem.setModel(m);

        }
    }
    
    public void setMesas(List<Object> lista){
        if (lista != null) {
            if (lista.size() > 0) {
                
                for (Object obj : lista) {
                    Mesa m = (Mesa) obj;
                    cbMesa.addItem(String.valueOf(m.getId()));
                }
            }
        }
    }
    
    public void set10GarcomETotal(){
        String aux = "";
        float garcom10 = 0;
        float totalPedido = 0;
        int count = 0;
        
        DefaultTableModel m = (DefaultTableModel) tblItemPedido.getModel();
        count = tblItemPedido.getRowCount();
        
        for(int i = 0; i < count; i++){
            aux = (String) tblItemPedido.getValueAt(i, 4); // pega o valor do item e tranforma numa string
            aux = aux.replaceAll("\\,", "."); // substitui virgula por ponto
            totalPedido += Float.valueOf(aux); // Soma o aux ao valor do pedido
        }
        
        garcom10 = (float) (totalPedido * 0.10);
        totalPedido += garcom10;
        
        lblV10Garcom.setText(dm.format(garcom10));
        lblVTotalPedido.setText(dm.format(totalPedido));  
    }
    
    public boolean verificaExistenciaItemPedido(int idItem){
        int totalLinhas = tblItemPedido.getRowCount();
        boolean jaExiste = false;
        
        // Verifica se existem itens adicionados
        if(totalLinhas != -1){
            // Se houver itens adicionados da tabela item pedido verifica se o id do item a ser adicionado é igual a algum id já adicionado
            for(int i = 0; i < totalLinhas; i++){
                if(idItem == (int) (tblItemPedido.getValueAt(i, 0))){
                    jaExiste = true;
                }
            }            
            return jaExiste;
        }else{
            return false;
        }
        
    }
    
    // Centraliza o JInternalFrame quando chamado
    public void setPosicao() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

}
